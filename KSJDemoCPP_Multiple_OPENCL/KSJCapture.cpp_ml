#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <pthread.h>
#include <sys/time.h>
#include <assert.h>
#include <iostream>
#include <sstream>
#include "KSJApi.h"
#include "string.h"
#include "stdlib.h"

//相机对象
typedef struct CameraInfo
{
	int nIndex; //索引
    char nSerial;//相机序列号
    volatile bool bIsWorking; //是否工作
	int nWidth;//宽
    int nHeight;//高
	unsigned char * pBuffer;//图片buffer
	int nBitCount; //像素位数 黑白为8
	pthread_t thread_id;//相机工作线程标识
} T_CameraInfo;

T_CameraInfo g_Carmera[16]; //



/*
功能:给每个相机创建4张图片的缓存	
*/
void KSJCreatBufs(int nCount,T_CameraInfo * pCameras)
{

    for(int nCamIndex = 0;nCamIndex < nCount;nCamIndex++)
    {
        int nSize = pCameras[nCamIndex].nWidth*pCameras[nCamIndex].nHeight*4;

        pCameras[nCamIndex].pBuffer = (unsigned char*)malloc(nSize);

    }

}

/*
功能:释放相机图片的缓存	
*/
void KSJ_ReleaseBufs(int number,T_CameraInfo * pCameras)
{
    for(int nCamIndex = 0;nCamIndex < number;nCamIndex++)
    {

        free(pCameras[nCamIndex].pBuffer);

    }

}

/*
功能:设置摄像头参数
参数：
int camcount:相机总数
*/
static void KSJSetCamsParam(int camcount)
{
    int nRet = 0;

    int nColStart = 0;
    int nRowStart = 0;
    int ggx;
    int nColSize = 0;
    int ggsx;
    int nRowSize = 0;
    KSJ_ADDRESSMODE ColAddressMode;
    KSJ_ADDRESSMODE RowAddressMode;

    for(int nIndex = 0;nIndex<camcount;nIndex++)
    {

        unsigned short pusDeviceType;
        int pnSerials;
        unsigned short pusFirmwareVersion;
        unsigned short pusFpgaVersion;

		

        KSJ_DeviceGetInformationEx( nIndex,  &pusDeviceType,  &pnSerials,  &pusFirmwareVersion,  &pusFpgaVersion);
        printf(" =====================%s %s %d       pusDeviceType = %d \n",__FILE__,__FUNCTION__,__LINE__,pusDeviceType);
        printf(" =====================%s %s %d       pnSerials = %d \n",__FILE__,__FUNCTION__,__LINE__,pnSerials);
        int fmaj = pusFirmwareVersion>>8;
        int fmin = pusFirmwareVersion&0x00ff;
        printf(" =====================%s %s %d       pusFirmwareVersion  fmaj = %d    fmin = %d \n",__FILE__,__FUNCTION__,__LINE__,fmaj,fmin);

        int fpgamaj= pusFpgaVersion>>8;
        int fpgamin= pusFpgaVersion&0x00ff;

        printf(" =====================%s %s %d       pusFpgaVersion  fpgamaj = %d    fpgamin = %d \n",__FILE__,__FUNCTION__,__LINE__,fpgamaj,fpgamin);

        KSJ_CaptureGetDefaultFieldOfView(nIndex,(int*)&nColStart,(int*)&nRowStart,(int *)&nColSize,(int *)&nRowSize,&ColAddressMode,&RowAddressMode);

        //#define printf  //
        printf(" =====================%s %s %d       nColStart = %d \n",__FILE__,__FUNCTION__,__LINE__,nColStart);
        printf(" =====================%s %s %d       nRowStart = %d \n",__FILE__,__FUNCTION__,__LINE__,nRowStart);
        printf(" =====================%s %s %d       nColSize = %d \n",__FILE__,__FUNCTION__,__LINE__,nColSize);
        printf(" =====================%s %s %d       nRowSize = %d \n",__FILE__,__FUNCTION__,__LINE__,nRowSize);

        int width = nColSize;

        int height = nRowSize;

        KSJ_CaptureGetFieldOfView(nIndex,&nColStart,&nRowStart,&nColSize,&nRowSize,&ColAddressMode,&RowAddressMode);


        printf(" =====================%s %s %d       nColStart = %d \n",__FILE__,__FUNCTION__,__LINE__,nColStart);
        printf(" =====================%s %s %d       nRowStart = %d \n",__FILE__,__FUNCTION__,__LINE__,nRowStart);
        printf(" =====================%s %s %d       nColSize = %d \n",__FILE__,__FUNCTION__,__LINE__,nColSize);
        printf(" =====================%s %s %d       nRowSize = %d \n",__FILE__,__FUNCTION__,__LINE__,nRowSize);

        KSJ_CaptureSetFieldOfView(nIndex,0,0,width,height,KSJ_SKIPNONE,KSJ_SKIPNONE);
        //          KSJ_CaptureSetFieldOfView(nIndex,0,0,width,height,KSJ_SKIPNONE,KSJ_SKIPNONE);

        KSJ_CaptureGetFieldOfView(nIndex,&nColStart,&nRowStart,&nColSize,&nRowSize,&ColAddressMode,&RowAddressMode);


        printf(" =====================%s %s %d       nColStart = %d \n",__FILE__,__FUNCTION__,__LINE__,nColStart);
        printf(" =====================%s %s %d       nRowStart = %d \n",__FILE__,__FUNCTION__,__LINE__,nRowStart);
        printf(" =====================%s %s %d       nColSize = %d \n",__FILE__,__FUNCTION__,__LINE__,nColSize);
        printf(" =====================%s %s %d       nRowSize = %d \n",__FILE__,__FUNCTION__,__LINE__,nRowSize);

        //        CHECK_RET(KSJ_LutSetEnable(nIndex, false));

        //        KSJ_FILTERMODE bayermode;
        //        KSJ_FilterGetMode(nIndex,&bayermode);

        KSJ_BAYERMODE bayermode;

        KSJ_BayerGetMode(nIndex, &bayermode);
        printf(" =====================%s %s %d       bayermode = %d \n",__FILE__,__FUNCTION__,__LINE__,bayermode);




        //        CHECK_RET(KSJ_BayerSetMode(nIndex, KSJ_BGGR_BGR24_FLIP));

        float nExposureTime = .0;
        KSJ_ExposureTimeGet(nIndex,&nExposureTime);

        printf(" %s %s %d       nExposureTime = %f \n",__FILE__,__FUNCTION__,__LINE__,nExposureTime);

        nExposureTime = 30;
        printf(" %s %s %d       nExposureTime = %f \n",__FILE__,__FUNCTION__,__LINE__,nExposureTime);

        KSJ_ExposureTimeSet(nIndex,nExposureTime);


        KSJ_ExposureTimeGet(nIndex,&nExposureTime);

        printf(" %s %s %d       nExposureTime = %f \n",__FILE__,__FUNCTION__,__LINE__,nExposureTime);

        int nlines = 0;

        KSJ_SetParam(nIndex,KSJ_EXPOSURE_LINES,200);


        KSJ_GetParam(nIndex,KSJ_EXPOSURE_LINES,&nlines);

        printf(" KSJ_GetParam =====================%s %s %d       nlines = %d \n",__FILE__,__FUNCTION__,__LINE__,nlines);

        KSJ_WB_MODE wbmode;
        wbmode = KSJ_HWB_AUTO_CONITNUOUS;


        KSJ_WhiteBalanceSet(nIndex,wbmode);

        KSJ_WhiteBalanceGet(nIndex,&wbmode);
        printf(" KSJ_WhiteBalanceGet =====================%s %s %d       nlines = %d \n",__FILE__,__FUNCTION__,__LINE__,wbmode);

        KSJ_CaptureGetSize(nIndex,&g_Carmera[nIndex].nWidth,&g_Carmera[nIndex].nHeight);
        printf(" %s %s %d      FOVS[%d].nWidth %d\n",__FILE__,__FUNCTION__,__LINE__,nIndex,g_Carmera[nIndex].nWidth);
        printf(" %s %s %d      FOVS[%d].nHeight %d\n",__FILE__,__FUNCTION__,__LINE__,nIndex,g_Carmera[nIndex].nHeight);

		int bValue;

		KSJ_QueryFunction(nIndex, KSJ_SUPPORT_SNAP_BUTTON, &bValue);

		printf(" %s %s %d      KSJ_SUPPORT_SNAP_BUTTON is  %d\n",__FILE__,__FUNCTION__,__LINE__, bValue);

		KSJ_QueryFunction(nIndex, KSJ_SUPPORT_TRIGGER_MODE_EXTERNAL, &bValue);
		printf(" %s %s %d      KSJ_SUPPORT_TRIGGER_MODE_EXTERNA is  %d\n",__FILE__,__FUNCTION__,__LINE__, bValue);

		KSJ_QueryFunction(nIndex, KSJ_SUPPORT_TRIGGER_MODE_SOFTWARE, &bValue);
		printf(" %s %s %d      KSJ_SUPPORT_TRIGGER_MODE_SOFTWARE is  %d\n",__FILE__,__FUNCTION__,__LINE__, bValue);


		KSJ_QueryFunction(nIndex, KSJ_SUPPORT_EMPTY_FRAMEBUFFER, &bValue);
		printf(" %s %s %d      KSJ_SUPPORT_EMPTY_FRAMEBUFFER is  %d\n",__FILE__,__FUNCTION__,__LINE__, bValue);

		KSJ_QueryFunction(nIndex, KSJ_SUPPORT_GET_FRAME_BUFFER_STATE, &bValue);
		printf(" %s %s %d      KSJ_SUPPORT_GET_FRAME_BUFFER_STATE is  %d\n",__FILE__,__FUNCTION__,__LINE__, bValue);

		KSJ_QueryFunction(nIndex, KSJ_SUPPORT_GET_FRAME_BUFFER_STATE, &bValue);
		printf(" %s %s %d      KSJ_SUPPORT_GET_FRAME_BUFFER_STATE is  %d\n",__FILE__,__FUNCTION__,__LINE__, bValue);

		//设置外部触发
		KSJ_TriggerModeSet(nIndex, KSJ_TRIGGER_EXTERNAL);
		KSJ_TRIGGERMODE nTriggerMode;	
		KSJ_TriggerModeGet(nIndex, &nTriggerMode);
		printf(" %s %s %d      TriggerModeGet is  %d\n",__FILE__,__FUNCTION__,__LINE__, nTriggerMode );

		//设置上升沿触发
		KSJ_TRIGGERMETHOD nTriggerMethod;
        KSJ_TriggerMethodSet(nIndex, KSJ_TRIGGER_RISINGEDGE);
		KSJ_TriggerMethodGet(nIndex, &nTriggerMethod);
		printf(" %s %s %d      KSJ_TriggerMethodGet is  %d\n",__FILE__,__FUNCTION__,__LINE__, nTriggerMethod );

		//设置为阻塞的方式读取一帧
		unsigned int nTimeOut;
		KSJ_CaptureSetTimeOut(nIndex, 0xFFFFFFFF);
		KSJ_CaptureGetTimeOut(nIndex, &nTimeOut);	
		printf(" %s %s %d	   KSJ_CaptureSetTimeOut is	%d\n",__FILE__,__FUNCTION__,__LINE__, nTimeOut );

    }



}

/*
功能:初始化康士佳摄像头

返回值：成功初始化话摄像头数量
*/
int KSJInitCapture() 
{
	int nCamCount = 0;
	int nRet = 0;
	nRet = KSJ_Init();
	//得到设备数量
	nCamCount = KSJ_DeviceGetCount();
	//设置设备参数
	KSJSetCamsParam(nCamCount);
	if(nCamCount<=0)
	{
		 return 0;
	}

	//得到相机信息
	for(int i = 0; i < nCamCount; i++)
	{
		KSJ_CaptureGetSizeEx(g_Carmera[i].nIndex,&g_Carmera[i].nWidth,&g_Carmera[i].nHeight, &g_Carmera[i].nBitCount);
	
	}

	KSJCreatBufs(nCamCount, g_Carmera);
	return nCamCount;
	
}

/*
功能:设置某个相机工作
*/
void KSJSetCamsWork(int nIndex)
{	
	g_Carmera[nIndex].bIsWorking = true;
}

/*
功能:设置某个相机停止工作
*/
void KSJUnSetCamsWork(int nIndex)
{
	g_Carmera[nIndex].bIsWorking = false;
}

/*
功能:	注销相机
*/
void KSJUnInitCapture(int nCamCount) 
{
	KSJ_UnInit();
	KSJ_ReleaseBufs(nCamCount,g_Carmera);
}


/*
功能:相机循环工作线程
参数:T_CameraInfo* 相机对象
*/
void* KSJCaptureWork(void* loopargs) {
		
		T_CameraInfo * pCameraInfo = (T_CameraInfo *)loopargs;
	
		static unsigned int nCount = 0;
		int nRet = 0;
		while(pCameraInfo->bIsWorking)
		{
			/*
				这样定义的环形缓存区 现在 像素深度为8位 刚好一个字节 对于彩色需要修改 日后补充
				pCameraInfo->pBuffer[(pCameraInfo->nHeight * pCameraInfo->nWidth)*(nCount%4)]
			*/
			 unsigned char * pBuf = &pCameraInfo->pBuffer[(pCameraInfo->nHeight * pCameraInfo->nWidth)*(nCount%4)];	
			//注意nRet为0捕获数据才成功

			KSJ_TRIGGERMODE tMode;
			KSJ_TriggerModeGet(pCameraInfo->nIndex, &tMode);
			KSJ_TRIGGERSTATUS tValue = KSJ_NO;
			KSJ_TriggerStatusGet(pCameraInfo->nIndex, &tValue);
			int nRet = 0xff;
			nRet  =	KSJ_CaptureRawData(pCameraInfo->nIndex, pBuf);
			if(nRet==0)
			{
				  nCount++;
				  //printf("KSJCapture %s %s %d\n",__FILE__,__FUNCTION__,__LINE__);
				  char strPath[256];
				  sprintf(strPath, "/sdcard/%d.bmp", nCount);	  
				  KSJ_HelperSaveToBmp(pBuf, pCameraInfo->nWidth, pCameraInfo->nHeight, 8, (const char*)strPath);
				  //KSJ_EmptyFrameBuffer(pCameraInfo->nIndex);
			}

			
		}	


	return NULL;

}

/*
功能:相机工作测试函数
参数:T_CameraInfo* 相机对象
*/

int main(void) 
{
	int nCount = 0;
    int ret;

	nCount = KSJInitCapture();

	for (int i = 0; i < nCount ; i++)
	{
		
		KSJSetCamsWork(i); //设置摄像头开始工作
		ret = pthread_create(&g_Carmera[i].thread_id, NULL, KSJCaptureWork, &g_Carmera[i]);
		
		if (ret < 0) 
		{
			return -1;
		}
	}
	//等待一分钟捕捉
	sleep(100);

    for(int i = 0; i < nCount; i++)
    {
    	KSJUnSetCamsWork(i); //设置摄像头开始工作
        pthread_join(g_Carmera[i].thread_id,NULL);
    }
	
	KSJUnInitCapture(nCount);
	
	return 0;
}


